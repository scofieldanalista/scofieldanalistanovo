<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Scofield Analista</title>
<style>
  body {
    background: #111;
    color: #eee;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    padding: 15px;
    max-width: 600px;
    margin: auto;
  }
  h1 {
    text-align: center;
    margin-bottom: 10px;
  }
  #history-input {
    width: 100%;
    height: 120px;
    font-family: monospace;
    font-size: 14px;
    background: #222;
    border: none;
    border-radius: 4px;
    color: #eee;
    padding: 8px;
    resize: vertical;
  }
  button {
    background: #4a90e2;
    color: white;
    border: none;
    padding: 10px 16px;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    margin: 6px 4px 10px 0;
  }
  button:disabled {
    background: #666;
    cursor: not-allowed;
  }
  .input-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 15px;
  }
  .stone-box {
    flex: 1;
    margin: 0 6px;
    border-radius: 6px;
    padding: 10px;
    color: #eee;
    text-align: center;
    user-select: none;
  }
  .stone-box.red {
    background: #b33;
  }
  .stone-box.black {
    background: #222;
    border: 2px solid #555;
  }
  .stone-box.white {
    background: #eee;
    color: #222;
    font-weight: bold;
    font-size: 1.5em;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  .stone-label {
    margin-bottom: 8px;
    font-weight: 600;
  }
  input[type="number"], input[type="text"] {
    width: 100%;
    padding: 6px 8px;
    border-radius: 4px;
    border: none;
    font-size: 16px;
    font-family: monospace;
    box-sizing: border-box;
  }
  #result {
    background: #222;
    padding: 15px;
    border-radius: 6px;
    min-height: 60px;
    margin-bottom: 12px;
  }
  #strategies {
    background: #1a1a1a;
    padding: 10px;
    border-radius: 6px;
    max-height: 140px;
    overflow-y: auto;
    font-size: 14px;
    margin-bottom: 10px;
  }
  .footer {
    text-align: center;
    font-size: 12px;
    color: #666;
    margin-top: 24px;
  }
  .dice {
    font-size: 2.8em;
    line-height: 1;
    margin-bottom: 4px;
    user-select: none;
  }
</style>
</head>
<body>

<h1>Scofield Analista</h1>

<label for="history-input"><strong>Cole o hist√≥rico completo aqui (com n√∫meros e hor√°rios no formato HH:MM:SS):</strong></label>
<textarea id="history-input" placeholder="Exemplo:
5
07:45:03
branco
07:47:10
8
07:49:12
..."></textarea>
<br />
<button id="process-history-btn">Analisar Hist√≥rico</button>
<button id="clear-history-btn">Limpar Hist√≥rico</button>

<div id="strategies"></div>

<div class="input-row" style="margin-top:25px;">
  <div class="stone-box red">
    <div class="stone-label">Pedra Anterior (Vermelho)</div>
    <input type="number" id="prev-stone-number" min="1" max="14" placeholder="N√∫mero" />
    <input type="text" id="prev-stone-time" placeholder="Hor√°rio HH:MM:SS" />
  </div>
  <div class="stone-box white">
    <div class="dice">üé≤</div>
    <div class="stone-label">Branco (Dado)</div>
    <input type="text" id="white-time" placeholder="Hor√°rio HH:MM:SS" />
  </div>
  <div class="stone-box black">
    <div class="stone-label">Pedra Posterior (Preto)</div>
    <input type="number" id="next-stone-number" min="1" max="14" placeholder="N√∫mero" />
    <input type="text" id="next-stone-time" placeholder="Hor√°rio HH:MM:SS" />
  </div>
</div>

<button id="analyze-btn">Analisar Entrada Manual</button>
<button id="correct-btn" disabled>Acertou</button>
<button id="wrong-btn" disabled>Errou</button>

<div id="result"></div>

<div class="footer">Scofield Analista - Desenvolvido para Blaze Double Game</div>

<script>
  // --- Fun√ß√µes utilit√°rias ---
  function parseTimeToSeconds(timeStr) {
    if (!timeStr) return null;
    const parts = timeStr.split(':');
    if (parts.length !== 3) return null;
    const [h, m, s] = parts.map(Number);
    if ([h, m, s].some(isNaN)) return null;
    return h * 3600 + m * 60 + s;
  }

  function secondsToTimeStr(seconds) {
    const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
    const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
    const s = (seconds % 60).toString().padStart(2, '0');
    return `${h}:${m}:${s}`;
  }

  // --- Estado do app ---
  let historyData = [];
  let strategies = [];
  let lastPrediction = null;
  let recMode = false;

  // --- Fun√ß√£o para parsear o hist√≥rico ---
  function parseHistory(text) {
    const lines = text.trim().split('\n').map(l => l.trim()).filter(l => l);
    let parsed = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].toLowerCase();

      if (/^\d+$/.test(line)) {
        const num = parseInt(line);
        let color = 'red';
        if (num >= 8 && num <= 14) color = 'black';
        parsed.push({ number: num, color, time: null });
      } else if (line === 'branco' || line === 'white' || line === '-') {
        parsed.push({ number: null, color: 'white', time: null });
      } else if (/^\d{2}:\d{2}:\d{2}$/.test(line)) {
        if (parsed.length > 0) {
          parsed[parsed.length - 1].time = line;
        }
      }
    }
    return parsed;
  }

  // --- Fun√ß√£o para gerar estrat√©gias ---
  function generateSimpleStrategies(data) {
    let strat = [];
    for (let i = 1; i < data.length - 1; i++) {
      if (data[i].color === 'white' && data[i - 1].number !== null && data[i + 1].number !== null) {
        strat.push({
          prevStone: data[i - 1].number,
          nextStone: data[i + 1].number,
          whiteTime: data[i].time,
        });
      }
    }
    return strat;
  }

  // --- Fun√ß√£o que verifica chuva de brancos ---
  function checkWhiteRain(data) {
    let rainCount = 0;
    for (let i = 0; i < data.length; i++) {
      if (data[i].color === 'white') rainCount++;
      else rainCount = 0;
      if (rainCount >= 3) return true;
    }
    return false;
  }

  // --- Fun√ß√£o para detectar REC (recupera√ß√£o) b√°sica ---
  function checkREC(data) {
    if (data.length < 5) return false;
    // Exemplo: se nos √∫ltimos 5 resultados tiver pelo menos 3 brancos, consideramos REC
    let recent = data.slice(-5);
    let whiteCount = recent.filter(d => d.color === 'white').length;
    return whiteCount >= 3;
  }

  // --- Processa o hist√≥rico colado ---
  function processHistory() {
    const text = document.getElementById('history-input').value;
    if (!text.trim()) {
      alert('Cole o hist√≥rico antes de processar.');
      return;
    }
    historyData = parseHistory(text);
    if (historyData.length === 0) {
      alert('Hist√≥rico inv√°lido ou vazio.');
      return;
    }
    strategies = generateSimpleStrategies(historyData);
    saveDataLocal();
    document.getElementById('result').textContent = 'Hist√≥rico analisado com sucesso. Estrat√©gias geradas: ' + strategies.length;

    const isRain = checkWhiteRain(historyData);
    const isRec = checkREC(historyData);
    recMode = isRec;

    let extraMsg = '';
    if (isRain) extraMsg += ' üåßÔ∏è Chuva de brancos detectada!';
    if (isRec) extraMsg += ' üîÑ Momento de REC (recupera√ß√£o).';

    document.getElementById('result').textContent += extraMsg;

    renderStrategies();
    toggleFeedbackButtons(false);
  }

  // --- Renderiza estrat√©gias na tela ---
  function renderStrategies() {
    const container = document.getElementById('strategies');
    if (!strategies.length) {
      container.textContent = 'Nenhuma estrat√©gia gerada ainda.';
      return;
    }
    container.innerHTML = '<strong>Estrat√©gias Salvas:</strong><br />';
    strategies.forEach((s, i) => {
      container.innerHTML += `#${i + 1}: Pedra anterior ${s.prevStone}, Pedra posterior ${s.nextStone}, Branco em ${s.whiteTime}<br>`;
    });
  }

  // --- An√°lise manual da entrada ---
  function analyzeManualInput() {
    const prevNum = parseInt(document.getElementById('prev-stone-number').value);
    const prevTime = document.getElementById('prev-stone-time').value.trim();
    const whiteTime = document.getElementById('white-time').value.trim();
    const nextNum = parseInt(document.getElementById('next-stone-number').value);
    const nextTime = document.getElementById('next-stone-time').value.trim();

    if (isNaN(prevNum) || !prevTime || !whiteTime || isNaN(nextNum) || !nextTime) {
      alert('Por favor, preencha todos os campos corretamente com n√∫meros e hor√°rios no formato HH:MM:SS.');
      return;
    }

    // Valida os hor√°rios
    if (
      parseTimeToSeconds(prevTime) === null ||
      parseTimeToSeconds(whiteTime) === null ||
      parseTimeToSeconds(nextTime) === null
    ) {
      alert('Hor√°rios inv√°lidos! Use o formato HH:MM:SS.');
      return;
    }

    // Busca estrat√©gias compat√≠veis (simplificado)
    const matches = strategies.filter(
      s => s.prevStone === prevNum && s.nextStone === nextNum
    );

    if (matches.length === 0) {
      document.getElementById('result').textContent =
        'Nenhuma estrat√©gia compat√≠vel encontrada para a combina√ß√£o informada.';
      toggleFeedbackButtons(false);
      lastPrediction = null;
      return;
    }

    lastPrediction = matches[0];
    document.getElementById('result').textContent =
      `Estrat√©gia encontrada: Pedra anterior ${prevNum}, Pedra posterior ${nextNum}, Branco detectado √†s ${lastPrediction.whiteTime}`;
    toggleFeedbackButtons(true);
  }

  // --- Feedback do usu√°rio para aprendizado ---
  function feedback(correct) {
    if (!lastPrediction) return;

    if (correct) {
      alert('Obrigado pelo feedback positivo! Estrat√©gia refor√ßada.');
    } else {
      alert('Feedback negativo recebido. Estrat√©gia ser√° revisada.');
      // Exemplo: remove a estrat√©gia para aprendizado b√°sico
      strategies = strategies.filter(
        s =>
          !(
            s.prevStone === lastPrediction.prevStone &&
            s.nextStone === lastPrediction.nextStone &&
            s.whiteTime === lastPrediction.whiteTime
          )
      );
      saveDataLocal();
      renderStrategies();
    }
    toggleFeedbackButtons(false);
    lastPrediction = null;
  }

  // --- Ativa ou desativa bot√µes de feedback ---
  function toggleFeedbackButtons(enable) {
    document.getElementById('correct-btn').disabled = !enable;
    document.getElementById('wrong-btn').disabled = !enable;
  }

  // --- Limpa hist√≥rico e estrat√©gias ---
  function clearHistory() {
    if (!confirm('Tem certeza que deseja limpar hist√≥rico e estrat√©gias?')) return;
    historyData = [];
    strategies = [];
    lastPrediction = null;
    recMode = false;
    document.getElementById('history-input').value = '';
    document.getElementById('result').textContent = '';
    document.getElementById('strategies').textContent = '';
    toggleFeedbackButtons(false);
    clearLocalStorage();
  }

  // --- Local Storage para salvar dados ---
  function saveDataLocal() {
    localStorage.setItem('scofield_history', JSON.stringify(historyData));
    localStorage.setItem('scofield_strategies', JSON.stringify(strategies));
  }
  function loadDataLocal() {
    const hist = localStorage.getItem('scofield_history');
    const strat = localStorage.getItem('scofield_strategies');
    if (hist) historyData = JSON.parse(hist);
    if (strat) strategies = JSON.parse(strat);
    if (strategies.length > 0) renderStrategies();
  }
  function clearLocalStorage() {
    localStorage.removeItem('scofield_history');
    localStorage.removeItem('scofield_strategies');
  }

  // --- Eventos ---
  document.getElementById('process-history-btn').addEventListener('click', processHistory);
  document.getElementById('analyze-btn').addEventListener('click', analyzeManualInput);
  document.getElementById('correct-btn').addEventListener('click', () => feedback(true));
  document.getElementById('wrong-btn').addEventListener('click', () => feedback(false));
  document.getElementById('clear-history-btn').addEventListener('click', clearHistory);

  // --- Carregar dados locais ao iniciar ---
  window.onload = () => {
    loadDataLocal();
  };
</script>

</body>
</html>
