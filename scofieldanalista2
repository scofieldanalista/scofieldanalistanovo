<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Scofield Analista</title>
<style>
  body {
    font-family: Arial, sans-serif;
    background: #111;
    color: #eee;
    margin: 0;
    padding: 10px;
  }
  h1 {
    text-align: center;
    margin-bottom: 1rem;
  }
  textarea {
    width: 100%;
    height: 120px;
    background: #222;
    color: #eee;
    border: none;
    padding: 10px;
    font-size: 1rem;
    resize: vertical;
    border-radius: 5px;
  }
  .section {
    margin-bottom: 20px;
  }
  label {
    display: block;
    margin: 6px 0 2px;
  }
  input[type="text"], input[type="number"], input[type="time"] {
    width: 100%;
    padding: 8px;
    font-size: 1rem;
    border-radius: 5px;
    border: none;
    background: #222;
    color: #eee;
  }
  button {
    margin-top: 10px;
    background: #1e90ff;
    color: white;
    border: none;
    padding: 12px 18px;
    font-size: 1rem;
    border-radius: 5px;
    cursor: pointer;
  }
  button:disabled {
    background: #555;
    cursor: not-allowed;
  }
  .stones-row {
    display: flex;
    justify-content: space-between;
    gap: 12px;
    margin-top: 10px;
  }
  .stone-box {
    flex: 1;
    background: #222;
    border-radius: 8px;
    padding: 12px;
    text-align: center;
  }
  .color-square {
    width: 40px;
    height: 40px;
    margin: 0 auto 8px auto;
    border-radius: 6px;
  }
  .red {
    background: #d22;
    box-shadow: 0 0 8px #d22;
  }
  .black {
    background: #222;
    border: 2px solid #ccc;
  }
  .white {
    background: #fff;
    border: 2px solid #aaa;
  }
  #result {
    margin-top: 15px;
    padding: 10px;
    background: #222;
    border-radius: 5px;
    min-height: 40px;
    font-weight: bold;
  }
  #strategies {
    margin-top: 10px;
    font-size: 0.9rem;
    color: #aaa;
  }
</style>
</head>
<body>

<h1>Scofield Analista</h1>

<div class="section">
  <label for="history-input"><strong>Cole o histórico completo aqui (número, branco e horário HH:MM:SS):</strong></label>
  <textarea id="history-input" placeholder="Exemplo:
5
12:00:10
branco
12:01:12
8
12:02:10
"></textarea>
  <button id="process-history-btn">Analisar Histórico</button>
</div>

<div class="section">
  <strong>Informe manualmente as pedras para analisar a estratégia:</strong>
  <div class="stones-row">
    <div class="stone-box">
      <div class="color-square red"></div>
      <label for="prev-stone-number">Pedra Anterior (Número)</label>
      <input type="number" id="prev-stone-number" min="1" max="14" placeholder="Ex: 5" />
      <label for="prev-stone-time">Horário (HH:MM:SS)</label>
      <input type="text" id="prev-stone-time" placeholder="Ex: 12:00:10" pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$" />
    </div>
    <div class="stone-box">
      <div class="color-square white"></div>
      <label for="white-time">Branco (Horário HH:MM:SS)</label>
      <input type="text" id="white-time" placeholder="Ex: 12:01:12" pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$" />
    </div>
    <div class="stone-box">
      <div class="color-square black"></div>
      <label for="next-stone-number">Pedra Posterior (Número)</label>
      <input type="number" id="next-stone-number" min="1" max="14" placeholder="Ex: 8" />
      <label for="next-stone-time">Horário (HH:MM:SS)</label>
      <input type="text" id="next-stone-time" placeholder="Ex: 12:02:10" pattern="^([0-1]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$" />
    </div>
  </div>
  <button id="analyze-btn">Analisar Manualmente</button>
</div>

<div class="section">
  <button id="correct-btn" disabled>Acertou</button>
  <button id="wrong-btn" disabled>Errou</button>
</div>

<div id="result"></div>
<div id="strategies"></div>

<script>
  // Funções utilitárias para parsing e validação
  function parseTimeToSeconds(timeStr) {
      if (!timeStr) return null;
      const parts = timeStr.split(':');
      if (parts.length !== 3) return null;
      const [h, m, s] = parts.map(Number);
      if ([h,m,s].some(isNaN)) return null;
      return h*3600 + m*60 + s;
  }

  function secondsToTimeStr(seconds) {
      const h = Math.floor(seconds/3600).toString().padStart(2,'0');
      const m = Math.floor((seconds%3600)/60).toString().padStart(2,'0');
      const s = (seconds%60).toString().padStart(2,'0');
      return `${h}:${m}:${s}`;
  }

  // Estado do app
  let historyData = [];
  let strategies = [];
  let lastPrediction = null;

  // Parse histórico com suporte para diferentes formatos
  function parseHistory(text) {
      const lines = text.trim().split('\n').map(l => l.trim()).filter(l=>l);
      let parsed = [];
      for(let i=0; i<lines.length; i++) {
          let line = lines[i];
          // Suporta formato: número / branco / horário
          if (/^\d+$/.test(line)) {
              // Número, cor determinada pela faixa 1-7 vermelho, 8-14 preto
              const num = parseInt(line);
              let color = 'red';
              if (num >= 8 && num <= 14) color = 'black';
              parsed.push({number: num, color: color});
          } else if (line.toLowerCase() === 'branco' || line.toLowerCase() === 'white' || line === '-') {
              // Branco detectado
              parsed.push({number: null, color: 'white'});
          } else if (/^\d{2}:\d{2}:\d{2}$/.test(line)) {
              // horário com segundos
              if(parsed.length > 0) {
                  parsed[parsed.length-1].time = line;
              }
          }
      }
      return parsed;
  }

  function processHistory() {
      const text = document.getElementById('history-input').value;
      if (!text.trim()) {
          alert('Cole o histórico antes de processar.');
          return;
      }
      historyData = parseHistory(text);
      if (historyData.length === 0) {
          alert('Histórico inválido ou vazio.');
          return;
      }
      // Aqui poderia gerar estratégias simples para demo
      strategies = generateSimpleStrategies(historyData);
      document.getElementById('result').textContent = 'Histórico analisado com sucesso. Estratégias geradas: ' + strategies.length;
      document.getElementById('correct-btn').disabled = true;
      document.getElementById('wrong-btn').disabled = true;
  }

  function generateSimpleStrategies(data) {
      // Exemplo simples: detecta se após pedra anterior 5, branco aparece nos próximos minutos
      // Em um sistema real, aqui teria várias estratégias complexas
      let strat = [];
      for(let i=1; i<data.length-1; i++) {
          if (data[i].color === 'white' && data[i-1].number !== null && data[i+1].number !== null) {
              strat.push({
                  prevStone: data[i-1].number,
                  nextStone: data[i+1].number,
                  whiteTime: data[i].time
              });
          }
      }
      return strat;
  }

  function analyzeManualInput() {
      const prevNum = parseInt(document.getElementById('prev-stone-number').value);
      const prevTime = document.getElementById('prev-stone-time').value;
      const whiteTime = document.getElementById('white-time').value;
      const nextNum = parseInt(document.getElementById('next-stone-number').value);
      const nextTime = document.getElementById('next-stone-time').value;

      if (isNaN(prevNum) || !prevTime || !whiteTime || isNaN(nextNum) || !nextTime) {
          alert('Por favor, preencha todos os campos corretamente com números e horários com segundos (HH:MM:SS).');
          return;
      }

      // Busca estratégia compatível para o horário dado (simplificado)
      let matches = strategies.filter(s => s.prevStone === prevNum && s.nextStone === nextNum);
      if (matches.length === 0) {
          document.getElementById('result').textContent = 'Nenhuma estratégia compatível encontrada para a combinação informada.';
          document.getElementById('correct-btn').disabled = true;
          document.getElementById('wrong-btn').disabled = true;
          return;
      }

      // Exibe resultado
      lastPrediction = matches[0];
      document.getElementById('result').textContent = `Estratégia encontrada: Pedra anterior ${prevNum}, Pedra posterior ${nextNum}, Branco detectado às ${lastPrediction.whiteTime}`;
      document.getElementById('correct-btn').disabled = false;
      document.getElementById('wrong-btn').disabled = false;
  }

  function feedback(correct) {
      if (!lastPrediction) return;
      // Aqui a lógica para ajustar estratégias com base no feedback
      if (correct) {
          alert('Obrigado pelo feedback positivo!');
      } else {
          alert('Feedback negativo recebido, estratégia será revisada.');
      }
      // Desabilita botões após feedback
      document.getElementById('correct-btn').disabled = true;
      document.getElementById('wrong-btn').disabled = true;
      lastPrediction = null;
  }

  document.getElementById('process-history-btn').addEventListener('click', processHistory);
  document.getElementById('analyze-btn').addEventListener('click', analyzeManualInput);
  document.getElementById('correct-btn').addEventListener('click', () => feedback(true));
  document.getElementById('wrong-btn').addEventListener('click', () => feedback(false));
</script>

</body>
</html>
